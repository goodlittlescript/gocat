#!/bin/bash
# usage: ./Projectfile [command]

#
# env - put these in a .env to use docker-compose directly
#

export PACKAGE=github.com/goodlittlescript/gocat
export PACKAGE_URL="https://${PACKAGE}"
export REGISTRY=
export RELEASE_VERSION='0.0-rc9'
export RELEASE_DATE='2020-06-15'

#
# workflow
#

# builds images locally - use 'docker-compose push/pull' to cache images in
# REGISTRY, which may facilitate remote builds.
images () {
  docker-compose build
}

# start the shell container if it doesn't exist, building images if needed
up () {
  if [ -z "$(docker-compose images -q)" ]
  then images
  fi
  docker-compose up --detach --no-build
}

# get a shell - can be used multiple times
shell () {
  up && docker-compose exec shell /bin/bash
}

# stop the shell container
down () {
  docker-compose stop
}

# remove the shell container and related stuff
clean () {
  docker-compose rm -s -f -v
}

# run a command in a shell container
run () {
  docker-compose run --rm shell "$@"
}

#
# helpers
#

# lint code
_lint () {
  gofmt -s -e -d . && manpages && git diff --exit-code man
}

# fix lint errors as possible
_fix () {
  gofmt -s -w . && manpages
}

# run tests
_test () {
  ./test/suite
}

# compile manpages
_manpages () {
  mkdir -p man/man1
  ls cmd/*/MANPAGE.md |
  while read manpagemd
  do
    export COMMAND="$(basename "$(dirname "$manpagemd")")"
    envsubst '$COMMAND $PACKAGE_URL $RELEASE_VERSION $RELEASE_DATE' < "$manpagemd" |
    pandoc --standalone -f markdown -t man - > "man/man1/$COMMAND.1"
  done
}

# prepare a release
release () {
  RELEASE_VERSION="${1?no version specified}"
  RELEASE_DATE="$(date +"%Y-%m-%d")"

  # set new version
  RELEASE_VERSION="${RELEASE_VERSION#v}"
  sed -i "" \
    -e "/^export /s|RELEASE_VERSION=.*|RELEASE_VERSION='$RELEASE_VERSION'|" \
    -e "/^export /s|RELEASE_DATE=.*|RELEASE_DATE='$RELEASE_DATE'|" \
    Projectfile

  # fix any issues
  fix

  # print next steps
  cat >&2 <<DOC
Next steps:

  git status # double check your changes

  git commit -a -m "Release $RELEASE_VERSION"
  git push origin master

  git tag "v$RELEASE_VERSION"  
  git push origin --tags

A release will be created by GitHub Actions.
DOC
}

#
# utility  
#

# list commands available
list () {
  compgen -A function
}

# make _ functions available both in and out of the shell container by:
# 1) removing the _ 2) wrapping them in run if outside the container
unfuncs="$(compgen -A "function" | grep "^_")"
if command -v docker-compose >/dev/null 2>&1
then eval "$(awk '{sub("_","");print $1"() {\nrun ./Projectfile "$1" \"\$@\"\n}\n"}' <<<"$unfuncs")"
else eval "$(declare -f $unfuncs | sed -e 's/^_//')"
fi
unset -f $unfuncs

if list | grep -qFx -- "${1:-}"
then "$@"
else
  if [ -z "$1" ]
  then printf "no command specified (try 'list')\n" >&2
  else printf "unknown command: %s\n" "$1" >&2
  fi
  exit 1
fi
